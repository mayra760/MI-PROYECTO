-- Parámetros de conexión
-- SET @db_name = 'fw';
-- SET @db_user = 'root';
-- SET @db_password = 'root';

-- Crear la base de datos si no existe
CREATE DATABASE IF NOT EXISTS fw;

-- Seleccionar la base de datos
USE fw;

-- Tabla de productos
CREATE TABLE IF NOT EXISTS tb_productos (
    id_producto INT NOT NULL,
    nombre_producto VARCHAR(150) NOT NULL,
    precio DECIMAL(10, 2) NOT NULL,
    cantidad INT NOT NULL,
    detalles VARCHAR(150) NOT NULL,
    color VARCHAR(50),
    tallas VARCHAR(50),
    ruta_img VARCHAR(250),
    id_categoria INT NOT NULL DEFAULT 1,
    PRIMARY KEY (id_producto),
    FOREIGN KEY (id_categoria) REFERENCES tb_categoria(id_categoria)
);

-- Tabla de categorías
CREATE TABLE IF NOT EXISTS tb_categoria (
    id_categoria INT NOT NULL,
    categoria VARCHAR(50) NOT NULL,
    PRIMARY KEY (id_categoria)
);

-- Tabla de usuarios
CREATE TABLE IF NOT EXISTS tb_usuarios (
    documento INT NOT NULL,
    nombre VARCHAR(30) NOT NULL,
    apellido VARCHAR(30) NOT NULL,
    correo VARCHAR(50) NOT NULL,
    contraseña VARCHAR(50) NOT NULL,
    fecha VARCHAR(30) NOT NULL,
    foto VARCHAR(2000),
    PRIMARY KEY (documento)
);

-- Tabla de carrito
CREATE TABLE IF NOT EXISTS tb_carrito (
    id_ca INT NOT NULL AUTO_INCREMENT,
    nombre_producto VARCHAR(40) NOT NULL,
    cantidad_pro INT NOT NULL,
    precio_pro DECIMAL(10, 2) NOT NULL,
    fecha_agre TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (id_ca)
);

-- Tabla de favoritos
CREATE TABLE IF NOT EXISTS tb_favoritos (
    id_favo INT NOT NULL AUTO_INCREMENT,
    nombre_produc VARCHAR(50) NOT NULL,
    cantidad_fav INT NOT NULL,
    fecga_agreg TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (id_favo)
);

-- Tabla de likes
CREATE TABLE IF NOT EXISTS tb_likes (
    id_like INT AUTO_INCREMENT,
    producto_id INT NOT NULL,
    usuario_id INT NOT NULL,
    valor VARCHAR(20) NOT NULL,
    FOREIGN KEY (producto_id) REFERENCES tb_productos(id_producto),
    FOREIGN KEY (usuario_id) REFERENCES tb_usuarios(documento),
    PRIMARY KEY (id_like)
);

ALTER TABLE tb_likes
ADD CONSTRAINT tb_likes_ibfk_1 FOREIGN KEY (producto_id)
REFERENCES tb_productos(id_producto)
ON DELETE CASCADE;

-- Tabla de fechas especiales
CREATE TABLE IF NOT EXISTS tb_fecha_especial (
    id INT AUTO_INCREMENT PRIMARY KEY,
    evento VARCHAR(255) NOT NULL,
    fecha_inicio DATE NOT NULL,
    fecha_fin DATE NOT NULL,
    color_evento VARCHAR(255) NOT NULL
);

-- Tabla de lista de deseos
CREATE TABLE IF NOT EXISTS tb_lista_deseos (
    id_deseo INT AUTO_INCREMENT PRIMARY KEY,
    documento INT NOT NULL,
    nombre_producto VARCHAR(150) NOT NULL,
    foto_referencia VARCHAR(255),
    fecha_creacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (documento) REFERENCES tb_usuarios(documento)
);

-- Tabla de facturas
CREATE TABLE IF NOT EXISTS tb_facturas (
    id_factura INT AUTO_INCREMENT PRIMARY KEY,
    documento_usuario INT NOT NULL,
    metodo_pago VARCHAR(50) NOT NULL,
    fecha_factura TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    direccion VARCHAR(255),
    telefono VARCHAR(20),
    total DECIMAL(10, 2) NOT NULL,
    FOREIGN KEY (documento_usuario) REFERENCES tb_usuarios(documento)
);

-- Tabla de detalles de factura
CREATE TABLE IF NOT EXISTS tb_detalle_factura (
    id_detalle INT AUTO_INCREMENT PRIMARY KEY,
    id_factura INT NOT NULL,
    id_producto INT NOT NULL,
    cantidad INT NOT NULL,
    precio_unitario DECIMAL(10, 2) NOT NULL,
    subtotal DECIMAL(10, 2) NOT NULL,
    FOREIGN KEY (id_factura) REFERENCES tb_facturas(id_factura),
    FOREIGN KEY (id_producto) REFERENCES tb_productos(id_producto)
);

-- Vista de productos con likes
CREATE OR REPLACE VIEW vista_productos_likes AS
SELECT 
    p.id_producto,
    p.nombre_producto,
    p.precio,
    p.cantidad,
    p.detalles,
    p.color,
    p.tallas,
    p.ruta_img,
    COUNT(l.id_like) AS total_likes
FROM 
    tb_productos p
LEFT JOIN 
    tb_likes l ON p.id_producto = l.producto_id
GROUP BY 
    p.id_producto;

-- Tabla para contar registros
CREATE TABLE IF NOT EXISTS tb_conteo_reg (
    id_conteo INT NOT NULL AUTO_INCREMENT,
    descripcion VARCHAR(100) NULL,
    conteo INT NOT NULL,
    fec_reg DATETIME NOT NULL,
    PRIMARY KEY (id_conteo)
);

-- Tabla para contar eliminaciones
CREATE TABLE IF NOT EXISTS tb_conteo_eli (
    id_conteo INT NOT NULL AUTO_INCREMENT,
    descripcion VARCHAR(100) NULL,
    conteo INT NOT NULL,
    fec_reg DATETIME NOT NULL,
    PRIMARY KEY (id_conteo)
);

-- Tabla para contar productos eliminados
CREATE TABLE IF NOT EXISTS tb_conteo_productos (
    id_conteo INT NOT NULL AUTO_INCREMENT,
    descripcion VARCHAR(100) NULL,
    conteo INT NOT NULL,
    fec_reg DATETIME NOT NULL,
    PRIMARY KEY (id_conteo)
);

-- Trigger para contar registros de usuarios
DELIMITER //
CREATE TRIGGER contando_registro_user
AFTER INSERT ON tb_usuarios
FOR EACH ROW 
BEGIN 
    INSERT INTO tb_conteo_reg (descripcion, conteo, fec_reg)
    VALUES (CONCAT('Se ha registrado el usuario: ', NEW.nombre, ' con el documento: ', NEW.documento), 1, NOW());
END;
//
DELIMITER ;

-- Trigger para contar eliminaciones de usuarios
DELIMITER //
CREATE TRIGGER contando_eliminar_user
AFTER DELETE ON tb_usuarios
FOR EACH ROW 
BEGIN 
    INSERT INTO tb_conteo_eli (descripcion, conteo, fec_reg)
    VALUES (CONCAT('Se ha eliminado el usuario: ', OLD.nombre, ' con el documento: ', OLD.documento), 1, NOW());
END;
//
DELIMITER ;

-- Trigger para contar productos eliminados
DELIMITER //
CREATE TRIGGER contando_pro_eliminado
AFTER DELETE ON tb_productos
FOR EACH ROW 
BEGIN 
    INSERT INTO tb_conteo_productos (descripcion, conteo, fec_reg)
    VALUES (CONCAT('Se ha eliminado el producto: ', OLD.nombre_producto, ' con el ID: ', OLD.id_producto), 1, NOW());
END;
//
DELIMITER ;
select * from tb_productos;